import os
import re
import datetime as dt
from dotenv import load_dotenv
import telebot
from telebot import types

from db import init_db, add_record, get_records
from report import make_report_xlsx, make_text_summary

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("–ù–µ –Ω–∞–π–¥–µ–Ω BOT_TOKEN –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏. –°–æ–∑–¥–∞–π .env –∏ –ø–æ–ª–æ–∂–∏ —Ç—É–¥–∞ BOT_TOKEN=...")

bot = telebot.TeleBot(BOT_TOKEN, parse_mode='Markdown')
init_db()

USER_STATE = {}  # user_id -> {'mode': 'income'|'expense', 'await': 'category'|'amount', 'category': str}

def main_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row(types.KeyboardButton("‚ûñ –†–∞—Å—Ö–æ–¥"), types.KeyboardButton("‚ûï –î–æ—Ö–æ–¥"))
    kb.row(types.KeyboardButton("üìä –û—Ç—á—ë—Ç"))
    return kb

def report_menu():
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("–ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π", callback_data="report:7d"))
    kb.add(types.InlineKeyboardButton("–≠—Ç–æ—Ç –º–µ—Å—è—Ü", callback_data="report:this_month"))
    kb.add(types.InlineKeyboardButton("–ü—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü", callback_data="report:last_month"))
    kb.add(types.InlineKeyboardButton("–ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥", callback_data="report:custom"))
    return kb

@bot.message_handler(commands=['start','menu'])
def cmd_start(message: types.Message):
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –≤–µ—Å—Ç–∏ —É—á—ë—Ç –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤.\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())

@bot.message_handler(func=lambda m: m.text in ["‚ûñ –†–∞—Å—Ö–æ–¥","‚ûï –î–æ—Ö–æ–¥"])
def handle_kind(message: types.Message):
    mode = 'expense' if "–†–∞—Å—Ö–æ–¥" in message.text else 'income'
    USER_STATE[message.from_user.id] = {'mode': mode, 'await': 'category'}
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ *–∫–∞—Ç–µ–≥–æ—Ä–∏—é/–æ–ø–∏—Å–∞–Ω–∏–µ* (–Ω–∞–ø—Ä–∏–º–µ—Ä: –µ–¥–∞, –∞—Ä–µ–Ω–¥–∞, –∑–∞—Ä–ø–ª–∞—Ç–∞)...")

@bot.message_handler(func=lambda m: USER_STATE.get(m.from_user.id, {}).get('await') == 'category')
def get_category(message: types.Message):
    st = USER_STATE.get(message.from_user.id)
    if not st: return
    st['category'] = message.text.strip()
    st['await'] = 'amount'
    bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ *—Å—É–º–º—É* (–Ω–∞–ø—Ä–∏–º–µ—Ä: 125000.50):")

def parse_amount(text: str):
    text = text.replace(",", ".").strip()
    if not re.match(r"^-?\d+(\.\d+)?$", text):
        return None
    return float(text)

@bot.message_handler(func=lambda m: USER_STATE.get(m.from_user.id, {}).get('await') == 'amount')
def get_amount(message: types.Message):
    st = USER_STATE.get(message.from_user.id)
    if not st: return
    amount = parse_amount(message.text)
    if amount is None:
        bot.send_message(message.chat.id, "–ù–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —á–∏—Å–ª–æ. –í–≤–µ–¥–∏ —Å—É–º–º—É –Ω–∞–ø–æ–¥–æ–±–∏–µ `125000.50`")
        return
    add_record(message.from_user.id, st['mode'], st['category'], amount)
    mode_emoji = "‚ûñ" if st['mode']=='expense' else "‚ûï"
    bot.send_message(message.chat.id, f"{mode_emoji} –ó–∞–ø–∏—Å–∞–ª: *{st['category']}* ‚Äî *{amount:.2f}*", reply_markup=main_menu())
    USER_STATE.pop(message.from_user.id, None)

@bot.message_handler(func=lambda m: m.text == "üìä –û—Ç—á—ë—Ç")
def ask_report(message: types.Message):
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –ø–µ—Ä–∏–æ–¥:", reply_markup=report_menu())

@bot.callback_query_handler(func=lambda c: c.data and c.data.startswith("report:"))
def report_period(c: types.CallbackQuery):
    action = c.data.split(":",1)[1]
    chat_id = c.message.chat.id
    user_id = c.from_user.id

    today = dt.date.today()
    if action == "7d":
        start = today - dt.timedelta(days=7)
        end = today + dt.timedelta(days=1)
        send_report(chat_id, user_id, start, end)
    elif action == "this_month":
        start = today.replace(day=1)
        if start.month == 12:
            end = dt.date(start.year+1, 1, 1)
        else:
            end = dt.date(start.year, start.month+1, 1)
        send_report(chat_id, user_id, start, end)
    elif action == "last_month":
        first_this = today.replace(day=1)
        end = first_this
        prev_month_last_day = first_this - dt.timedelta(days=1)
        start = prev_month_last_day.replace(day=1)
        send_report(chat_id, user_id, start, end)
    elif action == "custom":
        bot.answer_callback_query(c.id)
        bot.send_message(chat_id, "–í–≤–µ–¥–∏ –ø–µ—Ä–∏–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: `YYYY-MM-DD YYYY-MM-DD` (–Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ). –ü—Ä–∏–º–µ—Ä: `2025-09-01 2025-09-29`")
        USER_STATE[user_id] = {'await': 'custom_range'}
    else:
        bot.answer_callback_query(c.id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥")

@bot.message_handler(func=lambda m: USER_STATE.get(m.from_user.id, {}).get('await') == 'custom_range')
def handle_custom_range(message: types.Message):
    user_id = message.from_user.id
    parts = message.text.strip().split()
    if len(parts) != 2:
        bot.send_message(message.chat.id, "–ù—É–∂–Ω–æ –¥–≤–µ –¥–∞—Ç—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª: `YYYY-MM-DD YYYY-MM-DD`")
        return
    try:
        start = dt.datetime.strptime(parts[0], "%Y-%m-%d").date()
        end_inclusive = dt.datetime.strptime(parts[1], "%Y-%m-%d").date()
        end = end_inclusive + dt.timedelta(days=1)
    except ValueError:
        bot.send_message(message.chat.id, "–î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ `YYYY-MM-DD`. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        return
    send_report(message.chat.id, user_id, start, end)
    USER_STATE.pop(user_id, None)

def send_report(chat_id: int, user_id: int, start: dt.date, end: dt.date):
    start_iso = dt.datetime.combine(start, dt.time.min).isoformat()
    end_iso = dt.datetime.combine(end, dt.time.min).isoformat()
    rows = get_records(user_id, start_iso, end_iso)
    text = make_text_summary(rows)
    bot.send_message(chat_id, text)
    path = make_report_xlsx(rows, out_dir_path(), user_id, start, end - dt.timedelta(days=1))
    with open(path, "rb") as f:
        bot.send_document(chat_id, f, visible_file_name=path.name, caption="–≠–∫—Å–ø–æ—Ä—Ç Excel")

def out_dir_path():
    from pathlib import Path
    p = Path(__file__).parent / "exports"
    p.mkdir(exist_ok=True, parents=True)
    return p

if __name__ == "__main__":
    print("Bot is running...")
    bot.infinity_polling(skip_pending=True)
